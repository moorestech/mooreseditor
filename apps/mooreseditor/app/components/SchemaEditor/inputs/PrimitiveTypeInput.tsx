import { NumberInput } from "@mantine/core"
import { IntInput } from "./IntInput"
import { BooleanInput } from "./BooleanInput"
import { StringInput } from "./StringInput"
import { EnumInput } from "./EnumInput"
import { VectorInput } from "./VectorInput"
import { ArrayInput } from "./ArrayInput"
import { DataSchema } from "~/schema"
import { ForeignKeyInput } from "./ForeignKeyInput"
import { useOutletContext } from "@remix-run/react"
import {useEditorContext} from "~/hooks/useEditorContext";

interface Props {
  showLabel?: boolean;
  property?: string;
  propertySchema: DataSchema;
  value: any;
  onChange(value: unknown): void;
}

export function PrimitiveTypeInput({ showLabel = false, property, propertySchema, value, onChange }: Props) {
  const { context } = useOutletContext<{ context: ReturnType<typeof useEditorContext> }>()
  const master = context.masterDirectory;
  const label = showLabel ? property : undefined

  const defaultValue = propertySchema && 'default' in propertySchema ? propertySchema['default'] : undefined;
  const baseProps = { // Renamed to avoid confusion, though not strictly necessary
    label,
    value: value,
  }
  // defaultValue is handled by the onChange calls below when value is undefined

  if ('enum' in propertySchema) {
    // EnumInput doesn't seem to use defaultValue directly, pass baseProps
    return <EnumInput {...baseProps} data={propertySchema.enum.map(value => String(value))} onChange={onChange} />
  } else if ('autoGenerated' in propertySchema && propertySchema.autoGenerated) {
    if (value == undefined){
      return <>自動生成</>
    }else{
      return <>{value}</>
    }
  } else if ('foreignKey' in propertySchema) {
    const foreignKeyData = context.foreignKeySystem.getForeignTable(propertySchema.foreignKey);
    // ForeignKeyInput doesn't seem to use defaultValue directly, pass baseProps
    return <ForeignKeyInput
      {...baseProps}
      data={foreignKeyData}
      onChange={onChange}
    />
  } else {
    switch (propertySchema.type) {
      case 'integer':
        if (baseProps.value == undefined && defaultValue !== undefined) { // Use defaultValue directly here
          onChange(defaultValue as number);
        }
        return <IntInput {...baseProps} w={160} onChange={onChange} />

      case 'number':
        if (baseProps.value == undefined && defaultValue !== undefined) { // Use defaultValue directly here
          onChange(defaultValue as number);
        }
        return <NumberInput {...baseProps} w={160} onChange={onChange} />

      case 'boolean':
        if (baseProps.value == undefined && defaultValue !== undefined) { // Use defaultValue directly here
          onChange(defaultValue as boolean);
        }
        return <BooleanInput {...baseProps} onChange={onChange} />

      case 'string':
        if (baseProps.value == undefined && defaultValue !== undefined) { // Use defaultValue directly here
          onChange(defaultValue as string);
        }
        return <StringInput {...baseProps} w={160} onChange={e => onChange(e.currentTarget.value)} />

      case 'array':
        switch (propertySchema.pattern) {
          case '@vector2':
            // VectorInput likely uses NumberInput internally, pass baseProps
            return <VectorInput dimensions={2} step={1} {...baseProps} onChange={onChange} />
          case '@vector3':
            return <VectorInput dimensions={3} step={1} {...baseProps} onChange={onChange} />
          case '@vector4':
            return <VectorInput dimensions={4} step={1} {...baseProps} onChange={onChange} />
          case '@vector2Int':
            return <VectorInput dimensions={2} step={1} {...baseProps} onChange={onChange} />
          case '@vector3Int':
            return <VectorInput dimensions={3} step={1} {...baseProps} onChange={onChange} />
          case '@vector4Int':
            return <VectorInput dimensions={4} step={1} {...baseProps} onChange={onChange} />
          default:
            return <ArrayInput propertySchema={propertySchema} value={value} label={label} onChange={(values: any) => onChange(values)} />
        }
      default:
        null
    }

  }
}
