import { ActionIcon, Collapse, Group, Stack, Table } from "@mantine/core"
import {
    DataSchema,
    findNonPrimitivePropNames,
    findPrimitivePropNames,
    getPropSchema,
    isDefaultOpen,
    ObjectArraySchema,
    ObjectSchema,
    StringSchema
} from "~/schema"
import { Value } from "./Value";
import { Summary } from "./Summary";
import { SchemaEditor } from ".";
import { BsChevronDown, BsChevronRight } from "react-icons/bs";
import { BsArrowUp, BsArrowDown, BsGripVertical } from "react-icons/bs";
import { useDisclosure } from "@mantine/hooks";
import {useEffect, useState} from "react";
import { MdCheck, MdDelete, MdEdit } from "react-icons/md";
import { PrimitiveTypeInput } from "./inputs/PrimitiveTypeInput";
import { v4 as uuid } from 'uuid';

interface Props {
  schema: ObjectArraySchema,
  value: any,
  onSave?(values: any): void
}

export function SchemaTable({
  schema,
  value,
  onSave = () => { }
}: Props) {
  if (!(value instanceof Array)) {
    throw new Error('未対応の形式です')
  }
  const primitive = findPrimitivePropNames(schema.items)
  const [newRow, setNewRow] = useState({})
  
  const [draggedIndex, setDraggedIndex] = useState<number | null>(null);
  const [dropIndex, setDropIndex] = useState<number | null>(null);
  
  const handleDragStart = (index: number) => {
    setDraggedIndex(index);
  };
  
  const handleDragOver = (e: React.DragEvent, index: number) => {
    e.preventDefault();
    setDropIndex(index);
  };
  
  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    
    if (draggedIndex !== null && dropIndex !== null && draggedIndex !== dropIndex) {
      const newItems = [...value];
      const [draggedItem] = newItems.splice(draggedIndex, 1);
      newItems.splice(dropIndex, 0, draggedItem);
      
      onSave(newItems);
    }
    
    setDraggedIndex(null);
    setDropIndex(null);
  };
  
  return (
    <Table>
      <Table.Thead>
        <Table.Th></Table.Th>
        {Object.keys(primitive).map(primitiveField => (
          <Table.Th>{primitiveField}</Table.Th>
        ))}
      </Table.Thead>
      <Table.Tbody>
        {value.map((row, i: number) => {
          return (
            <SchemaRow
              key={i}
              schema={schema.items}
              value={row}
              index={i}
              totalRows={value.length}
              isDragging={draggedIndex === i}
              isDropTarget={dropIndex === i}
              onDragStart={() => handleDragStart(i)}
              onDragOver={(e: React.DragEvent) => handleDragOver(e, i)}
              onDrop={handleDrop}
              onSave={(newValue: any) => {
                onSave([
                  ...value.map((eachValue: any, j: number) => {
                    return i == j ? newValue : eachValue
                  }),
                ])
              }}
              onDelete={() => onSave(value.filter((_, j: number) => i != j))}
              onMoveUp={() => {
                if (i <= 0) return;
                
                const newValue = [...value];
                const temp = newValue[i];
                newValue[i] = newValue[i - 1];
                newValue[i - 1] = temp;
                
                onSave(newValue);
              }}
              onMoveDown={() => {
                if (i >= value.length - 1) return;
                
                const newValue = [...value];
                const temp = newValue[i];
                newValue[i] = newValue[i + 1];
                newValue[i + 1] = temp;
                
                onSave(newValue);
              }}
            />
          )
        })}
        <SchemaRow schema={schema.items} isNew value={newRow} onSave={setNewRow}
                   onAdd={() => {
                       const defaultValue = Object.keys(schema.items.properties).
                       map((propName: string) =>
                       {
                           const prop = getPropSchema(schema.items, propName, newRow)
                           if (!prop) return null

                           if (prop.type === 'string' && prop.autoGenerated) {
                               switch (prop.format) {
                                   case 'uuid':
                                       return [propName, uuid()]
                               }
                           }
                       }).filter(value => value != null)

                       onSave([
                       ...value,
                       {
                         ...newRow,
                         ...Object.fromEntries(defaultValue)
                       }
                     ])
                     setNewRow({})
                   }
                   }/>
      </Table.Tbody>
    </Table>
  )
}

interface RowProps {
  schema: ObjectSchema;
  value: Record<string, unknown>;
  isNew?: boolean;
  index?: number;
  totalRows?: number;
  isDragging?: boolean;
  isDropTarget?: boolean;
  onDragStart?(): void;
  onDragOver?(e: React.DragEvent): void;
  onDrop?(e: React.DragEvent): void;
  onSave?(values: any): void;
  onAdd?(): void;
  onDelete?(): void;
  onMoveUp?(): void;
  onMoveDown?(): void;
}

function SchemaRow({
  schema,
  value,
  isNew = false,
  index = 0,
  totalRows = 0,
  isDragging = false,
  isDropTarget = false,
  onDragStart = () => { },
  onDragOver = () => { },
  onDrop = () => { },
  onSave = () => { },
  onAdd = () => { },
  onDelete = () => { },
  onMoveUp = () => { },
  onMoveDown = () => { },
}: RowProps) {
  const primitiveFields = findPrimitivePropNames(schema) as Record<string, DataSchema>;
  const nonPrimitiveFields = findNonPrimitivePropNames(schema, value) as Record<string, DataSchema>;
  const [isOpen, { toggle }] = useDisclosure(false);
  const [isEditing, setIsEditing] = useState(false);
  useEffect(() => {setIsEditing(false);}, [schema]);

  return (
    <>
      <Table.Tr
        draggable={!isNew}
        onDragStart={onDragStart}
        onDragOver={onDragOver}
        onDrop={onDrop}
        style={{
          backgroundColor: isDragging ? '#f1f3f5' : 'transparent',
          border: isDropTarget ? '1px dashed #228be6' : '1px solid transparent',
        }}
      >
        <Table.Td>
          <Group gap="xs">
            <ActionIcon
              variant="subtle"
              color="gray"
              size='xs'
              style={{ cursor: 'grab' }}
              title="ドラッグして並べ替え"
              className="drag-handle"
            >
              <BsGripVertical />
            </ActionIcon>
            <ActionIcon size='xs' onClick={toggle}>
              {isOpen ? (
                <BsChevronDown />
              ) : (
                <BsChevronRight />
              )}
            </ActionIcon>
          </Group>
        </Table.Td>
        {Object.entries(primitiveFields).map(([propName, propSchema]: [string, DataSchema]) => {
          return (
            <Table.Td key={propName}>
              {(isEditing || isNew) ? (
                <PrimitiveTypeInput
                  property={propName}
                  propertySchema={propSchema}
                  value={value[propName]}
                  onChange={(newValue) => {
                    onSave({ ...value, [propName]: newValue })
                  }}
                />
              ) : (
                <Value schema={propSchema} value={value[propName]} />
              )}
            </Table.Td>
          )
        })}
        <Table.Td>
          {(isEditing || isNew) ? (
            <ActionIcon onClick={() => {
              onAdd()
              setIsEditing(false)
            }}>
              <MdCheck />
            </ActionIcon>
          ) : (
            <Group wrap='nowrap'>
              {!isNew && (
                <>
                  <div style={{ display: 'flex', flexDirection: 'column' }}>
                    <ActionIcon
                      size="xs"
                      onClick={onMoveUp}
                      disabled={index === 0}
                      title="上に移動"
                      style={{ marginBottom: '2px' }}
                    >
                      <BsArrowUp size={14} />
                    </ActionIcon>
                    <ActionIcon
                      size="xs"
                      onClick={onMoveDown}
                      disabled={index === totalRows - 1}
                      title="下に移動"
                    >
                      <BsArrowDown size={14} />
                    </ActionIcon>
                  </div>
                </>
              )}
              <ActionIcon onClick={() => setIsEditing(true)} title="編集">
                <MdEdit />
              </ActionIcon>
              <ActionIcon onClick={onDelete} title="削除">
                <MdDelete />
              </ActionIcon>
            </Group>
          )}
        </Table.Td>
      </Table.Tr>
      <Table.Tr p={0}>
        <Table.Td p={0}></Table.Td>
        <Table.Td p={0} colSpan={Object.keys(primitiveFields).length + 1}>
          <Collapse in={isOpen}>
            <Stack p={'xs'}>
              {Object.entries(nonPrimitiveFields).map(([propName, propSchema]: [string, DataSchema]) => {
                return <Summary key={propName} isOpenByDefault={isDefaultOpen(propSchema)} label={propName}>
                  <SchemaEditor
                    schema={propSchema}
                    value={value[propName]}
                    isEditing={isEditing || isNew}
                    onSave={(newValue) => onSave({ ...value, [propName]: newValue })}
                  />
                </Summary>
              })}
            </Stack>
          </Collapse>
        </Table.Td>
      </Table.Tr>
    </>
  )
}
