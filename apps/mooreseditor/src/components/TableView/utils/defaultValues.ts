import type { ValueSchema } from "../../../libs/schema/types";

export const getDefaultValue = (itemSchema: ValueSchema): any => {
  if ('type' in itemSchema) {
    switch (itemSchema.type) {
      case 'string':
        return itemSchema.default || '';
      case 'uuid':
        // Check if the UUID should be auto-generated
        if ('autoGenerated' in itemSchema && itemSchema.autoGenerated) {
          return crypto.randomUUID();
        }
        return '';
      case 'enum':
        return itemSchema.default || '';
      case 'integer':
        return itemSchema.default || 0;
      case 'number':
        return itemSchema.default || 0;
      case 'boolean':
        return itemSchema.default || false;
      case 'vector2':
      case 'vector2Int':
        return { x: 0, y: 0 };
      case 'vector3':
      case 'vector3Int':
        return { x: 0, y: 0, z: 0 };
      case 'vector4':
      case 'vector4Int':
        return { x: 0, y: 0, z: 0, w: 0 };
      case 'object': {
        const obj: any = {};
        if (itemSchema.properties) {
          itemSchema.properties.forEach(prop => {
            const { key, ...propSchema } = prop;
            if ('type' in propSchema) {
              obj[key] = getDefaultValue(propSchema as ValueSchema);
            }
          });
        }
        return obj;
      }
      case 'array':
        return [];
      default:
        return null;
    }
  }
  return null;
};