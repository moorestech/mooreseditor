import React, { useMemo, useCallback } from "react";
import { Table, Button, Stack, Group, Text, ActionIcon } from "@mantine/core";
import { IconPlus, IconTrash } from "@tabler/icons-react";
import type { ArraySchema, ObjectSchema, ValueSchema } from "../libs/schema/types";

interface Props {
  schema: ArraySchema;
  data: any[];
  onDataChange?: (newData: any[]) => void;
  onRowSelect?: (rowIndex: number) => void;
}

export const TableView = ({ schema, data, onDataChange, onRowSelect }: Props) => {
  const arrayData = data || [];
  
  const columns = useMemo(() => {
    if (!schema.items || !('type' in schema.items) || schema.items.type !== 'object') {
      return [];
    }
    
    const objectSchema = schema.items as ObjectSchema;
    if (!objectSchema.properties) {
      return [];
    }
    
    // Filter primitive type properties
    return objectSchema.properties.filter(prop => {
      if (!('type' in prop)) return false;
      const propSchema = prop as any;
      const primitiveTypes = ['string', 'uuid', 'enum', 'integer', 'number'];
      return primitiveTypes.includes(propSchema.type);
    });
  }, [schema]);
  
  const getDefaultValue = useCallback((itemSchema: ValueSchema): any => {
    if ('type' in itemSchema) {
      switch (itemSchema.type) {
        case 'string':
          return itemSchema.default || '';
        case 'uuid':
          // Check if the UUID should be auto-generated
          if ('autoGenerated' in itemSchema && itemSchema.autoGenerated) {
            return crypto.randomUUID();
          }
          return '';
        case 'enum':
          return itemSchema.default || '';
        case 'integer':
          return itemSchema.default || 0;
        case 'number':
          return itemSchema.default || 0;
        case 'boolean':
          return itemSchema.default || false;
        case 'vector2':
        case 'vector2Int':
          return { x: 0, y: 0 };
        case 'vector3':
        case 'vector3Int':
          return { x: 0, y: 0, z: 0 };
        case 'vector4':
        case 'vector4Int':
          return { x: 0, y: 0, z: 0, w: 0 };
        case 'object': {
          const obj: any = {};
          if (itemSchema.properties) {
            itemSchema.properties.forEach(prop => {
              const { key, ...propSchema } = prop;
              if ('type' in propSchema) {
                obj[key] = getDefaultValue(propSchema as ValueSchema);
              }
            });
          }
          return obj;
        }
        case 'array':
          return [];
        default:
          return null;
      }
    }
    return null;
  }, []);
  
  const addItem = useCallback(() => {
    console.log('TableView addItem called', { data, schema, onDataChange: !!onDataChange });
    if (onDataChange && schema.items) {
      const currentArray = Array.isArray(data) ? data : [];
      const newArray = [...currentArray];
      const defaultValue = getDefaultValue(schema.items);
      console.log('Adding item with default value:', defaultValue);
      newArray.push(defaultValue);
      onDataChange(newArray);
    }
  }, [data, schema.items, getDefaultValue, onDataChange]);
  
  const removeItem = useCallback((index: number) => {
    if (onDataChange) {
      const currentArray = Array.isArray(data) ? data : [];
      const newArray = [...currentArray];
      newArray.splice(index, 1);
      onDataChange(newArray);
    }
  }, [data, onDataChange]);
  
  if (!Array.isArray(data)) {
    return <Text>Invalid data</Text>;
  }
  
  return (
    <Stack gap="md">
      <Table striped highlightOnHover>
        <Table.Thead>
          <Table.Tr>
            <Table.Th style={{ width: '50px' }}>#</Table.Th>
            {columns.map(column => (
              <Table.Th key={column.key}>{column.key}</Table.Th>
            ))}
            <Table.Th style={{ width: '80px' }}>Actions</Table.Th>
          </Table.Tr>
        </Table.Thead>
        <Table.Tbody>
          {data.map((row, index) => (
            <Table.Tr 
              key={index}
              onClick={() => onRowSelect?.(index)}
              style={{ cursor: onRowSelect ? 'pointer' : 'default' }}
            >
              <Table.Td>{index + 1}</Table.Td>
              {columns.map(column => {
                const value = row[column.key];
                const columnSchema = column as any;
                const displayValue = columnSchema.type === 'uuid' && value
                  ? `${String(value).slice(0, 4)}..`
                  : String(value || '');
                return (
                  <Table.Td key={column.key}>
                    {displayValue}
                  </Table.Td>
                );
              })}
              <Table.Td>
                <Group gap="sm" wrap="nowrap">
                  <Button
                    size="xs"
                    onClick={(e: React.MouseEvent) => {
                      e.stopPropagation();
                      onRowSelect?.(index);
                    }}
                  >
                    Edit
                  </Button>
                  {onDataChange && (
                    <ActionIcon
                      color="red"
                      variant="subtle"
                      size="sm"
                      onClick={(e: React.MouseEvent) => {
                        e.stopPropagation();
                        removeItem(index);
                      }}
                    >
                      <IconTrash size={16} />
                    </ActionIcon>
                  )}
                </Group>
              </Table.Td>
            </Table.Tr>
          ))}
        </Table.Tbody>
      </Table>
      {onDataChange && (
        <Button
          variant="light"
          size="sm"
          leftSection={<IconPlus size={16} />}
          onClick={addItem}
        >
          Add Item
        </Button>
      )}
    </Stack>
  );
};