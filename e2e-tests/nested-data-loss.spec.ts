import { test, expect } from "@playwright/test";

test.describe("Nested Data Loss Bug - TableView Edit Button Issue", () => {
  test("Should not lose nested data when switching between Edit forms after adding new items", async ({ page }) => {
    // „Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞„Çí„Ç≠„É£„Éó„ÉÅ„É£
    const consoleLogs: string[] = [];
    page.on("console", (msg) => {
      const text = msg.text();
      consoleLogs.push(text);
      // „ÉÜ„Çπ„Éà‰∏≠„ÅÆ„É≠„Ç∞„ÇíÂá∫Âäõ
      if (text.includes("gearConnects") || text.includes("DATA LOSS")) {
        console.log("Browser console:", text);
      }
    });

    // „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å´„Ç¢„ÇØ„Çª„Çπ
    await page.goto("/");

    // „Éö„Éº„Ç∏„ÅÆ„É≠„Éº„Éâ„ÇíÂæÖÊ©ü
    await page.waitForTimeout(2000);

    // Step 1: FileOpen„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
    await page.getByRole("button", { name: "File Open" }).click();
    console.log("Step 1: Clicked File Open button");

    // Step 2: blocks„É°„Éã„É•„Éº„Çí„ÇØ„É™„ÉÉ„ÇØ
    await page.getByText("blocks").click();
    await page.waitForTimeout(1000);
    console.log("Step 2: Clicked blocks menu");

    // Step 3: Edit data„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
    await page.getByRole("button", { name: "Edit data" }).click();
    await page.waitForTimeout(500);
    console.log("Step 3: Clicked Edit data button");

    // Step 4: Â∞è„Åï„Å™Ê≠ØËªä„ÅÆEdit„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØÔºàÊúÄÂàù„ÅÆEdit„Éú„Çø„É≥Ôºâ
    const firstEditButton = page.getByRole("button", { name: "Edit" }).first();
    await firstEditButton.click();
    await page.waitForTimeout(500);
    console.log("Step 4: Clicked Edit button for Â∞è„Åï„Å™Ê≠ØËªä");

    // Step 5: Edit gearConnects„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
    // blockParam„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÂ±ïÈñã„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ
    const expandButton = page.locator('button').filter({ hasText: 'blockParam' }).first();
    if (await expandButton.isVisible()) {
      await expandButton.click();
      await page.waitForTimeout(300);
    }

    // gear„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÂ±ïÈñã
    const gearExpandButton = page.locator('button').filter({ hasText: 'gear' }).first();
    if (await gearExpandButton.isVisible()) {
      await gearExpandButton.click();
      await page.waitForTimeout(300);
    }

    // Edit gearConnects„Éú„Çø„É≥„ÇíÊé¢„Åó„Å¶„ÇØ„É™„ÉÉ„ÇØ
    const editGearConnectsButton = page.getByRole("button", { name: "Edit gearConnects" });
    if (await editGearConnectsButton.isVisible()) {
      await editGearConnectsButton.click();
      await page.waitForTimeout(500);
      console.log("Step 5: Clicked Edit gearConnects button");
    } else {
      console.log("Step 5: Edit gearConnects button not visible, skipping nested data check");
      // ‰ª£Êõø„ÅÆ„ÉÜ„Çπ„Éà„Éë„Çπ„Å´ÈÄ≤„ÇÄ
    }

    // Step 6: gearConnects„ÅÆ„ÉÜ„Éº„Éñ„É´„ÅßÂàùÊúü„Éá„Éº„Çø„ÇíÁ¢∫Ë™çÔºà2„Å§„ÅÆË¶ÅÁ¥†„Åå„ÅÇ„Çã„ÅØ„ÅöÔºâ
    const initialRows = page.locator('table').last().locator('tbody tr');
    const initialRowCount = await initialRows.count();
    console.log(`Step 6: Initial gearConnects row count: ${initialRowCount}`);
    expect(initialRowCount).toBe(2); // ÂàùÊúüÁä∂ÊÖã„Åß2Ë¶ÅÁ¥†„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç

    // JavaScript„Åß„Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„Å´ÂàùÊúüÁä∂ÊÖã„Çí‰øùÂ≠ò
    await page.evaluate(() => {
      const blocksData = (window as any).jsonData?.find((item: any) => item.title === 'blocks');
      const gearConnectsData = blocksData?.data?.data?.[0]?.blockParam?.gear?.gearConnects;
      (window as any).initialGearConnects = JSON.parse(JSON.stringify(gearConnectsData || []));
      console.log('Initial gearConnects data saved:', gearConnectsData);
    });

    // Step 7: blocks„ÉÜ„Éº„Éñ„É´„Å´Êàª„ÇãÔºàÂ∑¶ÂÅ¥„ÅÆÊúÄÂàù„ÅÆ„Éë„Éç„É´„Çí„ÇØ„É™„ÉÉ„ÇØÔºâ
    // TableView„ÇíÂê´„ÇÄ„Éë„Éç„É´„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Êàª„Çã
    await page.locator('div').filter({ hasText: /^data$/ }).first().click();
    await page.waitForTimeout(500);
    console.log("Step 7: Returned to blocks table");

    // Step 8: Add Item„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Êñ∞„Åó„ÅÑ„Éñ„É≠„ÉÉ„ÇØ„ÇíËøΩÂä†
    const addItemButton = page.getByRole("button", { name: "Add Item" }).first();
    await addItemButton.click();
    await page.waitForTimeout(1000);
    console.log("Step 8: Added new block item");

    // Step 9: Êñ∞„Åó„ÅèËøΩÂä†„Åï„Çå„Åü„Éñ„É≠„ÉÉ„ÇØ„ÅÆEdit„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
    // „ÉÜ„Éº„Éñ„É´„ÅÆÊúÄÂæå„ÅÆË°å„ÅÆEdit„Éú„Çø„É≥„ÇíÂèñÂæó
    const newItemEditButton = page.locator('table').first().locator('tbody tr').last()
      .getByRole("button", { name: "Edit" });
    await newItemEditButton.click();
    await page.waitForTimeout(500);
    console.log("Step 9: Clicked Edit button for new block");

    // Step 10: ÂÜçÂ∫¶Â∞è„Åï„Å™Ê≠ØËªäÔºàÊúÄÂàù„ÅÆ„Éñ„É≠„ÉÉ„ÇØÔºâ„ÅÆEdit„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
    // TableView„ÅÆÊúÄÂàù„ÅÆË°å„ÅÆEdit„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
    const firstBlockEditAgain = page.locator('table').first().locator('tbody tr').first()
      .getByRole("button", { name: "Edit" });
    await firstBlockEditAgain.click();
    await page.waitForTimeout(500);
    console.log("Step 10: Clicked Edit button for Â∞è„Åï„Å™Ê≠ØËªä again");

    // Step 11: Edit gearConnects„Éú„Çø„É≥„Çí„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÇØ„É™„ÉÉ„ÇØ
    // blockParam„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÂ±ïÈñã„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ
    const expandButtonAgain = page.locator('button').filter({ hasText: 'blockParam' }).first();
    if (await expandButtonAgain.isVisible()) {
      await expandButtonAgain.click();
      await page.waitForTimeout(300);
    }

    // gear„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÂ±ïÈñã
    const gearExpandButtonAgain = page.locator('button').filter({ hasText: 'gear' }).first();
    if (await gearExpandButtonAgain.isVisible()) {
      await gearExpandButtonAgain.click();
      await page.waitForTimeout(300);
    }

    // Edit gearConnects„Éú„Çø„É≥„ÇíÊé¢„Åó„Å¶„ÇØ„É™„ÉÉ„ÇØ
    const editGearConnectsButtonAgain = page.getByRole("button", { name: "Edit gearConnects" });
    if (await editGearConnectsButtonAgain.isVisible()) {
      await editGearConnectsButtonAgain.click();
      await page.waitForTimeout(500);
      console.log("Step 11: Clicked Edit gearConnects button again");
    } else {
      console.log("Step 11: Edit gearConnects button not visible again");
    }

    // Step 12: gearConnects„ÅÆ„Éá„Éº„Çø„Åå‰øùÊåÅ„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    const afterRows = page.locator('table').last().locator('tbody tr');
    const afterRowCount = await afterRows.count();
    console.log(`Step 12: After manipulation row count: ${afterRowCount}`);

    // JavaScript„Åß„Éá„Éº„Çø„ÅÆÁä∂ÊÖã„ÇíÁ¢∫Ë™ç
    const dataCheck = await page.evaluate(() => {
      const blocksData = (window as any).jsonData?.find((item: any) => item.title === 'blocks');
      const currentGearConnects = blocksData?.data?.data?.[0]?.blockParam?.gear?.gearConnects;
      const initialGearConnects = (window as any).initialGearConnects;

      console.log('Current gearConnects:', currentGearConnects);
      console.log('Initial gearConnects:', initialGearConnects);

      const dataLost = !currentGearConnects ||
                       currentGearConnects.length === 0 ||
                       currentGearConnects.length !== initialGearConnects?.length;

      if (dataLost) {
        console.log('üî¥ DATA LOSS DETECTED!');
        console.log('Initial count:', initialGearConnects?.length || 0);
        console.log('Current count:', currentGearConnects?.length || 0);
      }

      return {
        initialCount: initialGearConnects?.length || 0,
        currentCount: currentGearConnects?.length || 0,
        dataLost
      };
    });

    // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥Ôºö„Éá„Éº„Çø„ÅåÂ§±„Çè„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
    console.log(`Data check result: Initial=${dataCheck.initialCount}, Current=${dataCheck.currentCount}, DataLost=${dataCheck.dataLost}`);

    // ÂïèÈ°åÔºö„Éá„Éº„Çø„ÅåÂ§±„Çè„Çå„ÇãÔºàcurrentCount„Åå0„Å´„Å™„ÇãÔºâ
    expect(dataCheck.dataLost).toBe(false); // „Åì„ÅÆ„ÉÜ„Çπ„Éà„ÅØÂ§±Êïó„Åô„Çã„ÅØ„Åö
    expect(dataCheck.currentCount).toBe(dataCheck.initialCount); // „Éá„Éº„Çø„Åå‰øùÊåÅ„Åï„Çå„Å¶„ÅÑ„Çã„Åπ„Åç

    // „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„Çí‰øùÂ≠òÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
    await page.screenshot({ path: "nested-data-loss-final-state.png", fullPage: true });

    // „ÉÜ„Çπ„Éà„É¨„Éù„Éº„Éà
    console.log("\n=== Nested Data Loss Test Report ===");
    console.log(`Initial gearConnects count: ${dataCheck.initialCount}`);
    console.log(`Final gearConnects count: ${dataCheck.currentCount}`);
    console.log(`Data lost: ${dataCheck.dataLost}`);
    if (dataCheck.dataLost) {
      console.log("‚ùå BUG CONFIRMED: Nested data was lost when switching between Edit forms after adding new items");
    } else {
      console.log("‚úÖ No data loss detected");
    }
  });

  test("Alternative test: Check data integrity with multiple nested levels", async ({ page }) => {
    // „Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞„Çí„Ç≠„É£„Éó„ÉÅ„É£
    page.on("console", (msg) => {
      if (msg.text().includes("DATA CHECK") || msg.text().includes("üî¥")) {
        console.log("Browser:", msg.text());
      }
    });

    await page.goto("/");
    await page.waitForTimeout(2000);

    // FileOpen„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
    await page.getByRole("button", { name: "File Open" }).click();

    // mapObjects„ÇíÈÅ∏ÊäûÔºàearnItems„Å®„ÅÑ„ÅÜ„Éç„Çπ„Éà„Åï„Çå„ÅüÈÖçÂàó„ÇíÊåÅ„Å§Ôºâ
    await page.getByText("mapObjects").click();
    await page.waitForTimeout(1000);

    // ÊúÄÂàù„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅÆEdit„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
    const firstEdit = page.getByRole("button", { name: "Edit" }).first();
    await firstEdit.click();
    await page.waitForTimeout(500);

    // earnItems„ÅÆÂàùÊúüÁä∂ÊÖã„ÇíË®òÈå≤
    await page.evaluate(() => {
      const mapObjectsData = (window as any).jsonData?.find((item: any) => item.title === 'mapObjects');
      const firstItem = mapObjectsData?.data?.data?.[0];
      const earnItemsData = firstItem?.earnItems;
      (window as any).initialEarnItems = JSON.parse(JSON.stringify(earnItemsData || []));
      console.log('DATA CHECK: Initial earnItems:', earnItemsData);
    });

    // TableView„Å´Êàª„Çã
    await page.keyboard.press("Escape");
    await page.waitForTimeout(500);

    // Add Item„ÅßÊñ∞„Åó„ÅÑmapObject„ÇíËøΩÂä†
    await page.getByRole("button", { name: "Add Item" }).click();
    await page.waitForTimeout(500);

    // Êñ∞„Åó„ÅÑ„Ç¢„Ç§„ÉÜ„É†„ÅÆEdit„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
    const newItemEdit = page.locator('table').locator('tbody tr').last()
      .getByRole("button", { name: "Edit" });
    await newItemEdit.click();
    await page.waitForTimeout(500);

    // ÊúÄÂàù„ÅÆ„Ç¢„Ç§„ÉÜ„É†„Å´Êàª„Çã
    const backToFirst = page.locator('table').locator('tbody tr').first()
      .getByRole("button", { name: "Edit" });
    await backToFirst.click();
    await page.waitForTimeout(500);

    // earnItems„ÅÆ„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç
    const dataIntegrity = await page.evaluate(() => {
      const mapObjectsData = (window as any).jsonData?.find((item: any) => item.title === 'mapObjects');
      const firstItem = mapObjectsData?.data?.data?.[0];
      const currentEarnItems = firstItem?.earnItems;
      const initialEarnItems = (window as any).initialEarnItems;

      const isIntact = JSON.stringify(currentEarnItems) === JSON.stringify(initialEarnItems);

      if (!isIntact) {
        console.log('üî¥ DATA CHECK FAILED: earnItems data changed unexpectedly');
        console.log('Initial:', initialEarnItems);
        console.log('Current:', currentEarnItems);
      } else {
        console.log('‚úÖ DATA CHECK PASSED: earnItems data preserved');
      }

      return {
        isIntact,
        initial: initialEarnItems,
        current: currentEarnItems
      };
    });

    expect(dataIntegrity.isIntact).toBe(true);
  });
});