name: Release
on:
  push:
    tags: ['v*']        # 例: v1.2.3
  workflow_dispatch:

permissions:
  contents: write
  actions: read         # Action ZIP を取るのに必須

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # ──────────────────────────────────────────────────────────────
          - platform: macos-latest
            args: '--target universal-apple-darwin'
            os: macos          # ファイル名に入れる
            arch: universal
            ext: dmg
            dir: dmg           # 出力が入る bundle サブフォルダ
          # ──────────────────────────────────────────────────────────────
          - platform: ubuntu-24.04
            args: ''
            os: linux
            arch: x86_64
            ext: AppImage
            dir: appimage
          # ──────────────────────────────────────────────────────────────
          - platform: windows-latest
            args: ''
            os: windows
            arch: x86_64
            ext: msi
            dir: msi
          # ──────────────────────────────────────────────────────────────
    runs-on: ${{ matrix.platform }}

    steps:
      # 1) 取得 & セットアップ -------------------------------------------------
      - uses: actions/checkout@v4
      - if: matrix.platform == 'ubuntu-24.04'
        name: Install Linux deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
          build-essential pkg-config \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libjavascriptcoregtk-4.1-dev \
          libsoup-3.0-dev \
          libayatana-appindicator3-dev \
          libglib2.0-dev librsvg2-dev patchelf
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - uses: swatinem/rust-cache@v2
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: pnpm/action-setup@v4
      - name: Install apps/mooreseditor deps
        run: pnpm install --frozen-lockfile

      # 2) ビルドのみ ---------------------------------------------------------
      - id: tauri
        uses: tauri-apps/tauri-action@v0.5.20    # ← 最新パッチ
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || github.token }}
        with:
          projectPath: apps/mooreseditor
          # ★ tagName / releaseName を渡さない＝アップロードしない
          args: ${{ matrix.args }}

      # 3) タグ文字列から "v" を除いたバージョン番号を取得（未使用でも残す） ---
      - id: ver
        shell: bash
        run: echo "ver=${GITHUB_REF_NAME#v}" >>"$GITHUB_OUTPUT"

      # 4) リネーム + リリース作成/アップロード（手動時はスキップして artifact）
      - name: Rename & upload asset
        id: pack
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN || github.token }}
          EVENT_NAME: ${{ github.event_name }}
          RUN_NUMBER: ${{ github.run_number }}
          REF_NAME: ${{ github.ref_name }}
          REF_TYPE: ${{ github.ref_type }}
        run: |
          set -euo pipefail
          
          # イベント種別でバージョン決定
          # - 手動実行: dev-${RUN_NUMBER}
          # - タグ push: 例 v1.2.3 から 1.2.3
          TAG=""
          VER=""
          if [[ "${EVENT_NAME}" == "workflow_dispatch" || "${REF_TYPE:-}" != "tag" ]]; then
            VER="dev-${RUN_NUMBER}"
          else
            TAG="${REF_NAME:-}"
            VER="${TAG#v}"
          fi
          # ファイル名に安全な文字だけ残す（/ 等は _ に置換）
          VER_SAFE="${VER//[^A-Za-z0-9._-]/_}"
          
          OS="${{ matrix.os }}"
          ARCH="${{ matrix.arch }}"
          EXT="${{ matrix.ext }}"
          DIR="${{ matrix.dir }}"
          PROJECT_PATH="apps/mooreseditor"       # ★ 実プロジェクトに合わせて
          
          # 1) バンドル・ディレクトリを決定 ...............................
          CANDIDATES=(
            "${PROJECT_PATH}/src-tauri/target/universal-apple-darwin/release/bundle/${DIR}"
            "${PROJECT_PATH}/src-tauri/target/release/bundle/${DIR}"
            "src-tauri/target/universal-apple-darwin/release/bundle/${DIR}"
            "src-tauri/target/release/bundle/${DIR}"
          )
          for p in "${CANDIDATES[@]}"; do
            if [[ -d "${p}" ]]; then
              BUNDLE_DIR="${p}"
              break
            fi
          done
          
          # 見つからなければ再帰検索
          if [[ -z "${BUNDLE_DIR:-}" || ! -d "${BUNDLE_DIR}" ]]; then
            BUNDLE_DIR=$(find "${PROJECT_PATH}/src-tauri/target" \
              -type d -path "*/bundle/${DIR}" | head -n1 || true)
          fi
          if [[ -z "${BUNDLE_DIR}" || ! -d "${BUNDLE_DIR}" ]]; then
            echo "::error :: No bundle directory found for ${DIR}"
            exit 1
          fi
          
          # 2) 生成物ファイルを取得（AppImage / DMG / MSI など）.............
          FILE=$(find "${BUNDLE_DIR}" -maxdepth 1 -type f -name "*.${EXT}" | head -n1)
          if [[ -z "${FILE}" ]]; then
            echo "::error :: No bundle found in ${BUNDLE_DIR}"
            exit 1
          fi
          
          # 3) 統一フォーマット名へリネーム .................................
          NEW="mooreseditor-v${VER_SAFE}-${OS}-${ARCH}.${EXT}"
          mv "${FILE}" "${NEW}"
          
          # ────────────────────────────────────────────────────────────────
          # ★★ 直接実行バイナリも探す（あれば後続で利用）
          # ────────────────────────────────────────────────────────────────
          exe_suffix=""
          [[ "${OS}" == "windows" ]] && exe_suffix=".exe"
          
          BIN_CANDIDATES=(
            "${PROJECT_PATH}/src-tauri/target/universal-apple-darwin/release/mooreseditor"
            "${PROJECT_PATH}/src-tauri/target/release/mooreseditor${exe_suffix}"
            "src-tauri/target/universal-apple-darwin/release/mooreseditor"
            "src-tauri/target/release/mooreseditor${exe_suffix}"
          )
          
          for p in "${BIN_CANDIDATES[@]}"; do
            if [[ -f "${p}" ]]; then
              BIN_FILE="${p}"
              break
            fi
          done
          
          RAW=""
          if [[ -n "${BIN_FILE:-}" && -f "${BIN_FILE}" ]]; then
            RAW="mooreseditor-v${VER_SAFE}-${OS}-${ARCH}${exe_suffix}"
            cp "${BIN_FILE}" "${RAW}"           # 元を残したい場合は cp
            echo "Found raw binary: ${RAW}"
          else
            echo "No standalone binary found; will skip raw upload."
          fi
          
          # 4) イベント種別で分岐 ............................................
          if [[ "${EVENT_NAME}" != "workflow_dispatch" ]]; then
            # タグ push 等: Draft リリースにアップロード（従来どおり）
            TAG_USE="${TAG:-v${VER_SAFE}}"
            if ! gh release view "${TAG_USE}" &>/dev/null; then
              gh release create "${TAG_USE}" \
                -t "mooreseditor ${TAG_USE}" \
                -n "See the assets to download and install this version." \
                --draft
            fi
            gh release upload "${TAG_USE}" "${NEW}" --clobber
            [[ -n "${RAW}" ]] && gh release upload "${TAG_USE}" "${RAW}" --clobber
            echo "mode=released" >>"$GITHUB_OUTPUT"
          else
            # 手動実行: リリース操作は行わず、後続の artifact アップロードに委ねる
            echo "mode=artifact" >>"$GITHUB_OUTPUT"
          fi
          
          # 後続で使えるように出力を渡す
          echo "asset=${NEW}" >>"$GITHUB_OUTPUT"
          [[ -n "${RAW}" ]] && echo "raw=${RAW}" >>"$GITHUB_OUTPUT"

      # 5) 手動実行時のみ: アーティファクトとして保存 -----------------------
      - name: Upload artifacts (manual run)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: mooreseditor-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            ${{ steps.pack.outputs.asset }}
            ${{ steps.pack.outputs.raw }}
          if-no-files-found: ignore
