import type { Schema, ValueSchema } from '../libs/schema/types';
import { calculateAutoIncrement } from './autoIncrement';

/**
 * プライベート関数：基本的なデフォルト値を生成
 */
const getDefaultValue = (itemSchema: ValueSchema): any => {
  if ('type' in itemSchema) {
    switch (itemSchema.type) {
      case 'string':
        return itemSchema.default || '';
      case 'uuid':
        // Check if the UUID should be auto-generated
        if ('autoGenerated' in itemSchema && itemSchema.autoGenerated) {
          return crypto.randomUUID();
        }
        return '';
      case 'enum':
        return itemSchema.default || '';
      case 'integer':
        return itemSchema.default || 0;
      case 'number':
        return itemSchema.default || 0;
      case 'boolean':
        return itemSchema.default || false;
      case 'vector2':
      case 'vector2Int':
        return itemSchema.default || [0, 0];
      case 'vector3':
      case 'vector3Int':
        return itemSchema.default || [0, 0, 0];
      case 'vector4':
      case 'vector4Int':
        return itemSchema.default || [0, 0, 0, 0];
      case 'object': {
        const obj: any = {};
        if (itemSchema.properties) {
          itemSchema.properties.forEach(prop => {
            const { key, ...propSchema } = prop;
            if ('type' in propSchema) {
              obj[key] = getDefaultValue(propSchema as ValueSchema);
            }
          });
        }
        return obj;
      }
      case 'array':
        return [];
      default:
        return null;
    }
  }
  return null;
};

/**
 * スキーマに基づいて初期値を生成する関数
 * autoIncrementオプションが設定されている場合は、既存データから適切な値を計算
 * 
 * @param schema - 値を生成するためのスキーマ
 * @param existingData - autoIncrement計算のための既存データ配列（オプション）
 * @returns 生成された初期値
 */
export function createInitialValue(schema: Schema | ValueSchema, existingData: any[] = []): any {
  // スキーマがない場合はnullを返す
  if (!schema || !('type' in schema)) {
    return null;
  }

  // 基本的なデフォルト値を取得
  let defaultValue = getDefaultValue(schema as ValueSchema);

  // オブジェクト型の場合、autoIncrementプロパティをチェック
  if (schema.type === 'object' && schema.properties && Array.isArray(existingData)) {
    const obj = { ...defaultValue };
    
    schema.properties.forEach(prop => {
      const { key, ...propSchema } = prop;
      
      // integer型またはnumber型でautoIncrementが設定されている場合
      if ('type' in propSchema && 
          (propSchema.type === 'integer' || propSchema.type === 'number') && 
          propSchema.autoIncrement) {
        
        // 既存の配列データから自動インクリメント値を計算
        obj[key] = calculateAutoIncrement(
          existingData,
          key,
          propSchema.autoIncrement
        );
      }
    });
    
    defaultValue = obj;
  }

  return defaultValue;
}