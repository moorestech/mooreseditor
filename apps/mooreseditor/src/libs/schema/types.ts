export type RefString = string;

export interface ObjectSchema {
  type: 'object';
  openedByDefault?: boolean;
  properties?: Array<ObjectPropertySchema>;
  ref?: string;
}

export type ObjectPropertySchema = Schema & {
  key: string;
}

export interface ArraySchema {
  type: 'array';
  items: ValueSchema;
  minLength?: number;
  maxLength?: number;
  openedByDefault?: boolean;
}

export interface StringSchema {
  type: 'string';
  optional?: boolean;
  default?: string;
}

export interface EnumSchema {
  type: 'enum';
  optional?: boolean;
  options: Array<string>;
  default?: this["options"][number];
}

export interface ForeignKeyConfig {
  schemaId: string;
  foreignKeyIdPath: string;
  displayElementPath: string;
}

export interface UuidSchema {
  type: 'uuid';
  optional?: boolean;
  autoGenerated?: boolean;
  foreignKey?: ForeignKeyConfig;
}

export interface IntegerSchema {
  type: 'integer';
  optional?: boolean;
  default?: number;
  min?: number;
  max?: number;
}

export interface NumberSchema {
  type: 'number';
  optional?: boolean;
  default?: number;
  min?: number;
  max?: number;
}

export interface Vector2 {
  type: 'vector2';
  optional?: boolean;
  default?: [number, number];
}

export interface Vector3 {
  type: 'vector3';
  optional?: boolean;
  default?: [number, number, number];
}

export interface Vector4 {
  type: 'vector4';
  optional?: boolean;
  default?: [number, number, number, number];
}

export interface Vector2Int {
  type: 'vector2Int';
  optional?: boolean;
  default?: [number, number];
}

export interface Vector3Int {
  type: 'vector3Int';
  optional?: boolean;
  default?: [number, number, number];
}

export interface Vector4Int {
  type: 'vector4Int';
  optional?: boolean;
  default?: [number, number, number, number];
}

export interface BooleanSchema {
  type: 'boolean';
  optional?: boolean;
  default?: boolean;
}

export interface SwitchSchema {
  switch: string;
  cases: Array<{
    when: string | number | boolean;
  } & ValueSchema>;
}

export type PrimitiveSchema = |
  StringSchema |
  EnumSchema |
  UuidSchema |
  IntegerSchema |
  NumberSchema |
  BooleanSchema |
  Vector2 |
  Vector3 |
  Vector4 |
  Vector2Int |
  Vector3Int |
  Vector4Int

export type StructedSchema = |
  ObjectSchema |
  ArraySchema

export type ValueSchema = StructedSchema | PrimitiveSchema

export type Schema = |
  ValueSchema |
  SwitchSchema;

export type SchemaContainer = ArraySchema & {
  id: string;
  sortOrder?: number;
}
